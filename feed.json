[


  
    
    {
      "title": "gerrit 概念说明及使用手册",
      "permalink": "http://0.0.0.0:4321/use-gerrit.html",
      "link": "http://0.0.0.0:4321/use-gerrit.html",
      "date": "2019-10-27T21:02:39+08:00",
      
        "modified": "2019-10-27T21:07:17+08:00",
      
      "author": {
        "name": "max",
        "url": "http://soundpill.cn/",
        "email": "muyege@gmail.com"
      },
      "content": "<h1 id=\"gerrit-概念说明及使用手册\">Gerrit 概念说明及使用手册</h1>\n\n<ul>\n  <li><a href=\"#gerrit介绍\">Gerrit介绍</a>\n    <ul>\n      <li><a href=\"#gerrit简介\">Gerrit简介</a></li>\n      <li><a href=\"#为什么需要gerrit\">为什么需要Gerrit</a></li>\n      <li><a href=\"#代码审核的建议\">代码审核的建议</a></li>\n    </ul>\n  </li>\n  <li><a href=\"#gerrit使用\">Gerrit使用</a>\n    <ul>\n      <li><a href=\"#账号登录与查看设置\">账号登录与查看设置</a></li>\n      <li><a href=\"#本地仓库设置和提交\">本地仓库设置和提交</a></li>\n      <li><a href=\"#代码审核\">代码审核</a></li>\n      <li><a href=\"#冲突解决\">冲突解决</a></li>\n    </ul>\n  </li>\n</ul>\n\n<h3 id=\"gerrit介绍\">Gerrit介绍</h3>\n<h4 id=\"gerrit简介\">Gerrit简介</h4>\n<p>Gerrit, 一种开放源代码的代码审查软件, 使用网页界面. 利用网页浏览器, 同一个团队的软件开发者, 可以相互审阅彼此修改后的代码, 决定是否能够提交, 回退或是继续修改. 它使用版本控制系统Git作为底层.</p>\n\n<p>它分支自Rietveld, 作者为Google公司的Shawn Pearce, 原先是为了管理Android项目而产生. 这个软件的名称, 来自于荷兰家具设计师赫里特·里特费尔德(Gerrit Rietveld).</p>\n\n<p>因为对访问控制表(ACL)相关的修正, 没有被集成进Rietveld, 之后Gerrit就由Rietveld分支出来, 形成独立软件项目.</p>\n\n<p>最早它是由Python写成, 在第二版后, 改成用Java与SQL. 使用Google Web Toolkit来产生前端的JavaScript.</p>\n<h4 id=\"为什么需要gerrit\">为什么需要Gerrit</h4>\n<p>首先, 代码审查可以帮助程序员了解系统功能, 从整体掌控代码质量, 其次, 通过代码审核可以及时止损, 构建更加健壮的系统代码.</p>\n<h4 id=\"代码审核的建议\">代码审核的建议</h4>\n<ol>\n  <li>对事不对人, 大家都是同事, 在一个团队工作和气最重要. 不要在Code Review中说”你写的什么垃圾”这种话, 你可以说”这个变量名不是很好理解, 咱们换成xxx是不是更好”</li>\n  <li>每个Review至少给一条正面评价. Gerrit中有对代码点赞的功能, 可以时不时的使用一下.</li>\n  <li>保证发布的代码和评审意见的可读性.</li>\n  <li>用工具进行基础问题的自动化检查. 用Tab还是空格, 用两个空格还是四个空格, 缩进风格是使用K&amp;R还是Allman. 这些问题可以使用php code sniffer解决, 团队应该把精力放在代码规范, 代码性能优化等地方.</li>\n  <li>全员参加Code Review, 并设定各部分负责人.</li>\n  <li>每个代码PR(Pull Request)内容一定要少. Code Review效果和质量与PR代码量成反比, 提交的代码越多, Code Review的效果就越差. 所以要经常Code Review, 保证每个PR代码的量要少, 最多不超过300行/PR.</li>\n  <li>在写新代码之前, 先Review掉需要评审的代码. 不要堆积Review, 有PR产生一定要尽快Review, 否则时间拖的长了以后Review的过程就会比较艰难.</li>\n  <li>不要在Review中讨论需求, Review就是Review. 要明确Code Review是完善代码, 始终要以代码质量为中心要素.</li>\n</ol>\n\n<h3 id=\"gerrit使用\">Gerrit使用</h3>\n<h4 id=\"账号登录与查看设置\">账号登录与查看设置</h4>\n<p>首先, 需要在LDAP系统中发放账号, 拿到自己的账号后进行登录.</p>\n\n<p>登录后在账号中点击Settings设置, 找到新增SSH kyes的设置, 将自己机器上的公钥添加进去</p>\n\n<p><img src=\"https://wiki.zhiyinlou.com/download/attachments/22217826/15625763488831.jpg?version=1&amp;modificationDate=1562640424503&amp;api=v2\" width=\"1275px\" /></p>\n\n<p>然后到仓库中选择属于自己的项目clone到本地</p>\n\n<p><img src=\"https://wiki.zhiyinlou.com/download/attachments/22217826/15625764363851.jpg?version=1&amp;modificationDate=1562640609239&amp;api=v2\" width=\"1275px\" /></p>\n\n<p>注意: 红框中的两个项目为默认项目, 是新建仓库时需要继承权限来用的, 不要动</p>\n\n<p><img src=\"https://wiki.zhiyinlou.com/download/attachments/22217826/15625764606637.jpg?version=1&amp;modificationDate=1562640688008&amp;api=v2\" width=\"1275px\" /></p>\n\n<p>克隆完毕后需要在项目目录下修改和账户相同的邮箱与真实的姓名, 否则提交时会校验失败</p>\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>git config user.email max@max.com\ngit config user.name max\n</code></pre></div></div>\n<p>加–global是修改全局的, 如果项目很多, 为避免一个个项目修改麻烦, 可以加这个参数.</p>\n\n<h4 id=\"本地仓库设置和提交\">本地仓库设置和提交</h4>\n<p>因为Gerrit的设置, 一般用户是没有直接提交到主分支或者开发分支的权限的, 必须提交到引用分支先进行代码审核, 审核通过后才能merge到对应分支. 所以, 在本地操作代码库的时候会出现push不上去的问题, 这时候我们需要在项目下设置Gerrit提供给我们的引用分支.</p>\n\n<p>一般情况下在Gerrit权限设置里有三种类型的分支:</p>\n\n<p>refs/* : 这是管理员才有的权限, 表示当前项目下的所有分支, 拥有此权限可以随意push到任何远端分支</p>\n\n<p>refs/heads/* : 这是不需要经过code review的分支, 与 refs/* 同样权限</p>\n\n<p>refs/for/* : 这是需要经过code review的分支, 提交到此分支上的代码需要经过code review, 通过后才能合并到正式分支上.</p>\n\n<p>refs/for和refs/changes</p>\n\n<p>向refs/for/<branch-name>命名空间下推送提交并不会在其中创建引用, 而是为新的提交分配一个ID, 称为review-id, 并为该review-id的访问建立如下格式的引用refs/changes/nn/<review-id>/m, 其中:</review-id></branch-name></p>\n\n<p>    review-id是 Gerrit为评审任务顺序而分配的全局唯一的号码.</p>\n\n<p>    nn为review-id的后两位数, 位数不足用零补齐. 即nn为review-id除以100的余数.</p>\n\n<p>    m为修订号, 该review-id的首次提交修订号为1, 如果该修订被打回. 重新提交修订号会自增.</p>\n\n<p>refs/meta/config是项目管理访问控制分支</p>\n\n<p>我们在提交代码审核的时候需要将代码提交到gerrit为我们提供的引用分支上, 比如说: 我在dev分支上操作, 本来要push的命令需要由 git push origin dev 改为 git push origin HEAD:/refs/for/dev.</p>\n\n<p>如果嫌每次写这么长不方便的话, 可以在项目下做如下配置, git config remote.origin.push ‘refs/heads/*:refs/for/*’, 这样每次提交的时候就会自动提交到引用分支上了.</p>\n\n<h4 id=\"代码审核\">代码审核</h4>\n<p>当有代码需要审核时会在CHANGES标签中看到待审核的纪录</p>\n\n<p><img src=\"https://wiki.zhiyinlou.com/download/attachments/22217826/15625876603249.jpg?version=1&amp;modificationDate=1562640820081&amp;api=v2\" width=\"1275px\" /></p>\n\n<p>Open表示打开的代码审核</p>\n\n<p>Merged表示已经通过且已合并的代码审核</p>\n\n<p>Abandoned表示未通过或遗弃的代码审核</p>\n\n<p>审核页面, 有 +1 和 +2 两个权限.</p>\n\n<p>只有有 +2 权限的同学才能够把审核通过的代码 submit 到真正的远端分支中.</p>\n\n<p>+1 权限的同学, 多为与你一个组, 或者做同一个业务的同学, 他们对你的代码先进行一次review</p>\n\n<p>当+2 的同学审核通过后, submit 了代码后, 本次Review 就结束了.</p>\n\n<blockquote>\n  <p>然后回到你自己的本地分支, 执行一下 git pull –rebase 同步一下远端分支. 然后继续进行后续工作.</p>\n</blockquote>\n\n<p>当评审不通过时, 需要修改代码后再次提交评审, 这里分两种情况, 第一种情况是评审人员没有ABANDON的情况下, 可以修改代码后使用以下命令再次提交</p>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>git add file\ngit coomit --amend --no-edit\n</code></pre></div></div>\n\n<p>第二种情况是评审人员已经将此次评审ABANDON了, 那么就需要重新走正常流程提交评审.</p>\n\n<h4 id=\"冲突解决\">冲突解决</h4>\n<p>在实际开发中, 可能其他同学提交的代码与自己修改的代码修改了同一处地方, 从而产生了冲突.</p>\n\n<p>比如：\nA同学提交了 a.txt 文件, 在最后一行添加了而一些内容并且审核通过已经 submit了. 此时, B同学也在a.txt文件中的最后一行添加了内容, 但是没有先做 git pull –rebase 操作, 直接推到gerrit平台上则会产生冲突.</p>\n\n<p>此时: 需要先到本地进行 git pull –rebase 操作, 更新远端代码, 解决冲突! 具体步骤如下:</p>\n\n<p>1&gt; git pull –rebase</p>\n\n<p>2&gt; 找到冲突文件, 并解决冲突, 解决完后执行 git add 文件名</p>\n\n<p>3&gt; 继续执行git rebase –continue, 如果有冲突文件继续解决.</p>\n\n<p>4&gt; 待所有冲突解决之后, 执行git commit –amend  –no-edit 命令, 不需要对commit msg信息进行任何修改</p>\n\n<p>5&gt; 最后执行git push origin xxx, 将分支代码提交即可.</p>",
      "excerpt": "Gerrit 概念说明及使用手册",
      "languages": null,
      "categories": [],
      "tags": []
    }
    
  

  
    ,
    {
      "title": "mojave下使用pyenv安装python3出错的问题",
      "permalink": "http://0.0.0.0:4321/mojave%E4%B8%8B%E4%BD%BF%E7%94%A8pyenv%E5%AE%89%E8%A3%85python3%E5%87%BA%E9%94%99%E7%9A%84%E9%97%AE%E9%A2%98.html",
      "link": "http://0.0.0.0:4321/mojave%E4%B8%8B%E4%BD%BF%E7%94%A8pyenv%E5%AE%89%E8%A3%85python3%E5%87%BA%E9%94%99%E7%9A%84%E9%97%AE%E9%A2%98.html",
      "date": "2019-02-26T15:33:39+08:00",
      
        "modified": "2019-10-27T20:31:39+08:00",
      
      "author": {
        "name": "max",
        "url": "http://soundpill.cn/",
        "email": "muyege@gmail.com"
      },
      "content": "<h2 id=\"使用pyenv安装python3时出现如下报错\">使用pyenv安装python3时出现如下报错</h2>\n<p><img src=\"https://i.loli.net/2019/10/27/yfcsCjKokvIrSpA.jpg\" alt=\"60f1733aly1g0jo757rfnj21go0q8wnf.jpg\" />\n按照提示来看,好像是在提示我没有安装zlib库,但是我已经装了,没办法,google一下吧.\n(如果你因为没有安装zlib库而产生这个问题, 那就好办了, 直接brew install zlib)</p>\n<h2 id=\"google搜索到的解决方案大都是要安装xcode命令行工具\">google搜索到的解决方案大都是要安装xcode命令行工具</h2>\n<div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>xcode-select <span class=\"nt\">--install</span>\n</code></pre></div></div>\n<p>这个我也安装了, 不安装的话啥也干不了啊</p>\n<h2 id=\"最后解决方案\">最后解决方案</h2>\n<p>查看一下xcode-select -v的版本\n<img src=\"https://i.loli.net/2019/10/27/UMXsg7Il8rSdB2O.jpg\" alt=\"60f1733aly1g0jo9e0g3lj20cg0240tb.jpg\" /></p>\n\n<p>这个版本的xcode-select 在默认情况下不包含Mojave SDK的头文件的,需要手动安装,mojave采用了新的SDK,关于新SDK的解释,官方的文档在这里\nhttps://developer.apple.com/macos/whats-new/</p>\n\n<p>接下来,我手动安装了新的SDK头文件,解决完毕</p>\n<div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>installer <span class=\"nt\">-pkg</span> /Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_10.14.pkg <span class=\"nt\">-target</span> /\n</code></pre></div></div>\n<p><img src=\"https://i.loli.net/2019/10/27/WsRfrFkYnSMpP4X.jpg\" alt=\"60f1733aly1g0jomwysz8j21fm040n0e.jpg\" /></p>",
      "excerpt": "使用pyenv安装python3时出现如下报错\n\n按照提示来看,好像是在提示我没有安装zlib库,但是我已经装了,没办法,google一下吧.\n(如果你因为没有安装zlib库而产生这个问题, 那就好办了, 直接brew install zlib)\ngoogle搜索到的解决方案大都是要安装xcode命令行工具\nxcode-select --install\n\n这个我也安装了, 不安装的话啥也干不了啊\n最后解决方案\n查看一下xcode-select -v的版本",
      "languages": null,
      "categories": [],
      "tags": []
    }
    
  

  
    ,
    {
      "title": "redis中的SDS数据结构",
      "permalink": "http://0.0.0.0:4321/redis%E4%B8%AD%E7%9A%84sds%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.html",
      "link": "http://0.0.0.0:4321/redis%E4%B8%AD%E7%9A%84sds%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.html",
      "date": "2019-02-26T15:31:32+08:00",
      
        "modified": "2019-10-27T20:31:39+08:00",
      
      "author": {
        "name": "max",
        "url": "http://soundpill.cn/",
        "email": "muyege@gmail.com"
      },
      "content": "<h2 id=\"sdssimple-dynamic-string简单动态字符串\">SDS(Simple Dynamic String)简单动态字符串</h2>\n<p>在Redis中可修改的字符串值都是采用的SDS数据结构, 而不可修改的都采用了C字符串</p>\n<h2 id=\"sds的结构\">SDS的结构</h2>\n<p>有三个基本变量</p>\n<ul>\n  <li>free 纪录buf数组中未使用字节的数量</li>\n  <li>len 纪录buf数组中已使用字节的数量, 等于SDS所保存字符串的长度</li>\n  <li>buf 字节数组, 用于保存字符串(二进制)\n    <h2 id=\"为什么采用sds\">为什么采用SDS</h2>\n    <p>SDS是基于C字符串结构的缺点优化后的产物, 因为采用C字符串的方式会有以下一些问题：</p>\n  </li>\n  <li>获取字符串长度需要遍历字符串获取, 将需要O(N)的时间复杂度</li>\n  <li>C字符串会有缓冲区溢出的问题</li>\n  <li>一旦修改字符串操作发生就会重新分配内存, 修改N次就分配N次\n所以, 基于以上问题SDS结构的优点也显而易见了, 如下:</li>\n  <li>因为结构体中标记了字符串长度, 所以获取长度的时间复杂度变成了O(1)</li>\n  <li>SDS的API中对内存分配的机制杜绝了缓冲区溢出的问题</li>\n  <li>同样, API中的操作也减少了修改字符串长度时所需的内存重分配次数</li>\n  <li>二进制安全</li>\n  <li>兼容部分C字符串函数\n    <h2 id=\"内存分配机制\">内存分配机制</h2>\n  </li>\n  <li>空间预分配\n在字符串增长操作中有两种情况来预分配空间\n第一种是修改后的长度(len的值)小于1MB的情况下, free的值会和len的值相同, 来做到减少内存分配次数, 预分配以后可能会使用到的空间\n第二种是修改后的长度大于1MB的情况下, free的值会多修改为1MB, 也就是在原来基础上多出1MB的未使用空间</li>\n  <li>惰性空间释放\n在字符串缩短操作的时候, 不会将释放的空间马上回收, 而是会写入到free中, 将缩短的长度标记为未使用空间为将来可能会使用的字符串预留位置。SDS中也有相应的API, 可以在需要时真正释放这部分空间。</li>\n</ul>",
      "excerpt": "SDS(Simple Dynamic String)简单动态字符串\n在Redis中可修改的字符串值都是采用的SDS数据结构, 而不可修改的都采用了C字符串\nSDS的结构\n有三个基本变量\n\n  free 纪录buf数组中未使用字节的数量\n  len 纪录buf数组中已使用字节的数量, 等于SDS所保存字符串的长度\n  buf 字节数组, 用于保存字符串(二进制)\n    为什么采用SDS\n    SDS是基于C字符串结构的缺点优化后的产物, 因为采用C字符串的方式会有以下一些问题：\n  \n  获取字符串长度需要遍历字符串获取, 将需要O(N)的时间复杂度\n  C字符串会有缓冲区溢出的问题\n  一旦修改字符串操作发生就会重新分配内存, 修改N次就分配N次\n所以, 基于以上问题SDS结构的优点也显而易见了, 如下:\n  因为结构体中标记了字符串长度, 所以获取长度的时间复杂度变成了O(1)\n  SDS的API中对内存分配的机制杜绝了缓冲区溢出的问题\n  同样, API中的操作也减少了修改字符串长度时所需的内存重分配次数\n  二进制安全\n  兼容部分C字符串函数\n    内存分配机制\n  \n  空间预分配\n在字符串增长操作中有两种情况来预分配空间\n第一种是修改后的长度(len的值)小于1MB的情况下, free的值会和len的值相同, 来做到减少内存分配次数, 预分配以后可能会使用到的空间\n第二种是修改后的长度大于1MB的情况下, free的值会多修改为1MB, 也就是在原来基础上多出1MB的未使用空间\n  惰性空间释放\n在字符串缩短操作的时候, 不会将释放的空间马上回收, 而是会写入到free中, 将缩短的长度标记为未使用空间为将来可能会使用的字符串预留位置。SDS中也有相应的API, 可以在需要时真正释放这部分空间。",
      "languages": null,
      "categories": [],
      "tags": []
    }
    
  

  
    ,
    {
      "title": "rebase和merge的区别",
      "permalink": "http://0.0.0.0:4321/rebase%E5%92%8Cmerge%E7%9A%84%E5%8C%BA%E5%88%AB.html",
      "link": "http://0.0.0.0:4321/rebase%E5%92%8Cmerge%E7%9A%84%E5%8C%BA%E5%88%AB.html",
      "date": "2019-02-24T15:36:37+08:00",
      
        "modified": "2019-10-27T20:31:39+08:00",
      
      "author": {
        "name": "max",
        "url": "http://soundpill.cn/",
        "email": "muyege@gmail.com"
      },
      "content": "<h4 id=\"变基\">变基</h4>\n<p>找了一大圈, 还是官方的解释最好, 贴出来自己看吧, “变基”这个名字起的很好, 文档中的”重新播放”的解释也相当生动</p>\n\n<p>https://git-scm.com/book/zh/v2/Git-分支-变基</p>",
      "excerpt": "变基\n找了一大圈, 还是官方的解释最好, 贴出来自己看吧, “变基”这个名字起的很好, 文档中的”重新播放”的解释也相当生动",
      "languages": null,
      "categories": [],
      "tags": []
    }
    
  

  
    ,
    {
      "title": "cgi, fastcgi, php-cgi, php-fpm的关系",
      "permalink": "http://0.0.0.0:4321/cgi,-fastcgi,-php-cgi,-php-fpm.html",
      "link": "http://0.0.0.0:4321/cgi,-fastcgi,-php-cgi,-php-fpm.html",
      "date": "2019-02-21T15:33:39+08:00",
      
        "modified": "2019-10-27T20:31:39+08:00",
      
      "author": {
        "name": "max",
        "url": "http://soundpill.cn/",
        "email": "muyege@gmail.com"
      },
      "content": "<h4 id=\"cgi\">cgi</h4>\n<p>通用网关接口, Common Gateway Interface, CGI是Web服务器运行时外部程序的规范, 按CGI编写的程序可以扩展服务器功能. 所以, 广义上的cgi是一种接口标准, 不是字面意义上的接口. 狭义上, cgi就是cgi程序, 运行在服务器上, 提供同客户端HTML页面的接口. 绝大多数的cgi程序被用来解释处理来自表单的输入信息, 并在服务器产生相应的处理, 或将相应的信息反馈给浏览器, cgi程序使网页具有交互功能. \ncgi程序处理步骤:\n1) 通过Internet把用户请求送到web服务器.\n2) web服务器接受用户请求并交给CGI程序处理.\n3) CGI程序把处理结果传送给web服务器.\n4) web服务器把结果送回到用户.</p>\n\n<h4 id=\"fastcgi\">fastcgi</h4>\n<p>快速通用网关接口, Fast Common Gateway Interface, CGI有很多缺点, 每接收一个请求就要fork一个进程处理, 只能接收一个请求作出一个响应, 请求结束后该进程就会结束. 而fastcgi会事先启动起来, 作为一个cgi的管理服务器存在, 使用进程/线程池来处理一连串的请求.\nfastcgi程序处理步骤:\n1) web服务器启动时载入fastcgi进程管理器\n2) fastcgi自身初始化, 启动多个cgi解释器进程并等待来自web server的请求\n3) 当请求来到web服务器时, web服务器通过socket请求fastcgi进程管理器, fastcgi进程管理器选择并连接到一个cgi解释器, web服务器将cgi环境变量和标准输入发送到fastcgi子进程\n4) fastcgi子进程处理请求完成后将标准输出和错误从同一连接返回给web服务器, 当fastcgi子进程结束后请求便结束.fastcgi子进程接着等待处理来自fastcgi进程管理器的下一个连接.</p>\n\n<h4 id=\"php-cgi\">php-cgi</h4>\n<p>php实现的cgi程序</p>\n\n<h4 id=\"php-fpm\">php-fpm</h4>\n<p>php实现的fastcgi程序</p>",
      "excerpt": "cgi\n通用网关接口, Common Gateway Interface, CGI是Web服务器运行时外部程序的规范, 按CGI编写的程序可以扩展服务器功能. 所以, 广义上的cgi是一种接口标准, 不是字面意义上的接口. 狭义上, cgi就是cgi程序, 运行在服务器上, 提供同客户端HTML页面的接口. 绝大多数的cgi程序被用来解释处理来自表单的输入信息, 并在服务器产生相应的处理, 或将相应的信息反馈给浏览器, cgi程序使网页具有交互功能. \ncgi程序处理步骤:\n1) 通过Internet把用户请求送到web服务器.\n2) web服务器接受用户请求并交给CGI程序处理.\n3) CGI程序把处理结果传送给web服务器.\n4) web服务器把结果送回到用户.",
      "languages": null,
      "categories": [],
      "tags": []
    }
    
  

  
    ,
    {
      "title": "推荐两个实用好玩的网站",
      "permalink": "http://0.0.0.0:4321/%E6%8E%A8%E8%8D%90%E4%B8%A4%E4%B8%AA%E5%AE%9E%E7%94%A8%E5%A5%BD%E7%8E%A9%E7%9A%84%E7%BD%91%E7%AB%99.html",
      "link": "http://0.0.0.0:4321/%E6%8E%A8%E8%8D%90%E4%B8%A4%E4%B8%AA%E5%AE%9E%E7%94%A8%E5%A5%BD%E7%8E%A9%E7%9A%84%E7%BD%91%E7%AB%99.html",
      "date": "2019-02-21T10:23:37+08:00",
      
        "modified": "2019-10-27T20:31:39+08:00",
      
      "author": {
        "name": "max",
        "url": "http://soundpill.cn/",
        "email": "muyege@gmail.com"
      },
      "content": "<h3 id=\"在线绘图工具\">在线绘图工具</h3>\n<p>有流程图，有类图，应有尽有，样式还很好看\nhttps://www.draw.io/</p>\n\n<h3 id=\"ai在线抠图工具\">AI在线抠图工具</h3>\n<p>不说了，自己看吧\nhttps://www.gaoding.com/koutu</p>",
      "excerpt": "在线绘图工具\n有流程图，有类图，应有尽有，样式还很好看\nhttps://www.draw.io/",
      "languages": null,
      "categories": [],
      "tags": []
    }
    
  


]
